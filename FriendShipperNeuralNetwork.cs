using System;
using System.IO;
using System.Collections.Generic;
namespace SmartFriendShipper
{
    /// <summary>
    /// Класс, описывающий нейросеть, результатами работы которой пользуется "Smart FriendShipper".
    /// </summary>
    class FriendShipperNeuralNetwork
    {
        // Защищённые поля, хранящие значения всех весов.
        protected List<List<double>> first_weights = WeightsFileParse(0);
        protected List<List<double>> second_weights = WeightsFileParse(1);
        protected List<List<double>> third_weights = WeightsFileParse(2);
        protected List<double> fourth_weights = new List<double> { 0.5868726490992338, -0.33120811559007335, 4.025704193769657, -0.7394161513556519, 1.08305085098394, -0.11427847041534761, -0.42980897979977867, 0.9516734929538494, -1.724569506342768, -0.5657097488310853, 1.75113016657079, -2.326413191602618, 0.5535940571999646, 0.06206642691355784, -0.10991639097643445, -0.8581614220460353, 0.2812704930708332, 0.9026318284673605, -0.5239600190684188, -0.021600655742278135, 1.195631719200545, -0.05584614413530284, -0.7535055786983761, -1.2754735374117971, -1.2553792243777693, 0.9796720198575285, 0.027416058208559087, -0.4062731151545672, -0.26964255710788054, -0.9524139064703785, -1.7855828248238184, -0.653038894026374, -0.22885984117783392, 0.4506979694900347, 0.041002403582321045, 0.34244288425100583, -1.7862573965849753, 0.4089436432846205, 2.2251159890363956, 0.4022916651870025, 1.214557827205674, 0.3460196143626456, -0.2551110739411003, -0.5796688602580867, 0.945812803336232, -1.9538137438505672, 5.136210839288447, 0.2548391027826442, 0.3814108571375945, -1.3777872713705799, -2.2865234662453497, 0.013473233267010854, -0.3228375442197284, -0.2969563331905864, -0.13480870601971587, -0.5279018818795806, 0.5505897531575926, 0.4162125539982293 };
        protected List<double> first_bias_weights = new List<double> { 0.40092017263477603, -0.14741202255211247, 1.3106692487967253, -12.081776732649985, -0.1407278722560261, -0.051493643568465745, -1.5670774910228495, 0.5398924672121302, -4.916162361037214, 1.1793913164029644, 1.4194256304208943, 0.2622012839291432, 0.47676544955141265, -0.29761130299328103, 7.253331996990576, 1.0610760316958727, -2.7938200044999904, 2.5907076146440695, 2.343500740598259, 1.174108877018137, -9.257497618127879, 1.8687675843261475, 0.28904933391135973, 3.526481003969297, -1.3751559653975238, 1.5370901910224084, 0.49135963895813567, -2.0507229057213907, -0.5886734995986613, 0.26552908161022587, -0.7439139905603637, 0.9614631628829018, 1.4693057655912583, -2.5940620540917365, -1.6219251484715462, -2.500430184221919, -0.8565107125450381, 2.1474217428190485, 0.6032365347050943, -0.7003377454790902, -2.549339118775103, -3.6396584190367327, 0.6006025877006249, -2.1979543666302974, -5.326843296859635, -0.5196316309587837, -0.3433790516862901, -1.5656308440759699, -3.1206893889366154, -0.24609683802928517, -0.37273158251278327, 3.569611992454132, 2.086553285695484, -6.637917314574237, -1.3475271938028976, 1.9022560048728796, 0.3269926338801249, 9.12361393815191 };
        protected List<double> second_bias_weights = new List<double> { -1.0462603755941482, 6.054132841204048, -0.22590298456113245, 0.04631941507304419, -0.1714015356494922, -0.827023865418895, -7.917258773126499, 2.235923169453324, -0.6455573229948256, -5.539714789953003, -1.8136489605335182, -0.38864463711346947, 0.33722298109305116, -1.2262601877194543, 2.5461756138443863, 0.6684212760427459, -0.34519775642539235, -2.2846783413153338, 2.945245530722282, -1.8815512357107291, -4.981486676678726, -1.0946499953159075, 3.7883618808132713, -1.8846319664508668, -5.903548742441476, 0.4172646894052566, -11.918759839065252, 2.3397865219478837, 1.4008568826253647, 0.1263790324123113, -7.370379087237428, -0.20149335365148507, -2.2515130174078792, -8.67565294269027, -0.07605607060280031, -5.993423373959828, -1.324711854261519, -13.074434564268506, -3.2526014598410384, -6.0381826468833735, 1.0852701906843008, -0.4372310384036857, 0.51119033483132, 1.9664532535791508, -0.5800367769162216, -6.67262418737423, 1.7187714007432902, 0.10504545720135992, -0.8634783621422331, -5.215630054711796, -0.2650143290629551, -0.6631642180615435, -0.6687490201508086, -0.22779169809727712, 0.3386253112596118, -0.5683734103189666, 1.6997596866687756, -0.5432548612910736 };
        protected List<double> third_bias_weights = new List<double> { -1.2007702402221245, 0.8264832810992863, -3.50980497202157, 0.03316957118411229, -1.2011947876748383, -0.8444624140929641, 0.28072018534405935, -1.5290303954137254, 0.2358256051246592, 0.10227597791627444, 1.4712501066558388, 0.47366672226896045, 0.8957631537421711, -2.082049288489461, 0.1552219501546024, -0.32182203782463475, 0.4710627266471818, 1.4071721091851068, -0.6407645482748009, -0.5961573627564027, 0.1551308089780903, -0.18773556355845517, 0.9634830472067646, 0.5341820395253768, 0.9748168769844467, -1.3512855548024283, 0.02112000763855859, -1.6461505909703733, -2.3525731832045045, -0.281324093931594, 0.4373799857262038, 0.22013891395832005, -1.8513399370231445, -2.254409566628564, -1.6664719209624914, 0.0617856839940525, -1.2664221764308954, -1.380334537291604, -0.9338229652897381, -1.5337061352979107, -1.1489223538724214, -0.29474230252461536, 0.24437719471274616, 1.1462555081843417, -0.7096851603910018, -0.9694540371451412, -1.3866900918605127, 0.03557158402501155, -0.8994218247165626, -0.4756883546661991, 1.1581152085334954, -0.946804212817245, -0.3847348881027521, -0.7282737838304246, -0.2749723487201194, -1.0439982999931443, -1.5440409278897655, 0.5332655747466584 };
        protected double fourth_bias_weight = -0.4397383273714044;

        /// <summary>
        /// Метод, позволяющий проинициализировать некоторые поля класса, значениями, записанными в файл "weights.txt"
        /// </summary>
        /// <param name="string_to_parse">Номер строки файла, к которой нужно обращаться за весами для текущего поля.</param>
        /// <returns>Список весов, являющийся значением текущего поля.</returns>
        public static List<List<double>> WeightsFileParse(int string_to_parse)
        {
            List<List<double>> weights = new List<List<double>>();
            List<double> pre_weights = new List<double>();
            string[] weights_data = File.ReadAllLines("weights.txt");
            string weights_string = weights_data[string_to_parse].Substring(1).Replace(" ", "").Replace("},{", ",").Replace("}", "");
            string[] weights_array = weights_string.Split(',');
            for (int i = 0; i < weights_array.Length; i++)
            {
                pre_weights.Add((double)decimal.Parse(weights_array[i].Replace(".", ",")));
            }
            weights.Add(new List<double>());
            for (int i = 0; i < pre_weights.Count; i++)
            {
                int k = i / 58;
                weights[k].Add(pre_weights[i]);
                if ((i + 1) % 58 == 0 && i != pre_weights.Count - 1)
                {
                    weights.Add(new List<double>());
                }
            }
            return weights;
        }

        /// <summary>
        /// Функция активации (сигмоида).
        /// </summary>
        /// <param name="x">Параметр функции.</param>
        /// <returns>Возвращаемое значение.</returns>
        public double ActivationFunction(double x)
        {
            return 1 / (1 + 1 / (Math.Pow(Math.E, x)));
        }

        /// <summary>
        /// Метод, рассчитывающий входные значения следующего скрытого слоя по предыдущему слою нейросети.
        /// </summary>
        /// <param name="current_nodes"> Нейроны текущего слоя.</param>
        /// <param name="current_weights"> Обычные веса, связывающие нейроны текущего слоя с нейронами следующего слоя.</param>
        /// <param name="bias_weights">Веса смещения, связывающие нейроны текущего слоя с нейронами следующего слоя.</param>
        /// <returns>Значения нейронов следующего слоя, записанные в список.</returns>
        private List<double> GetNextInnerLayer(List<double> current_nodes, List<List<double>> current_weights, List<double> bias_weights)
        {
            List<double> next_nodes = new List<double>();
            for (int i = 0; i < 58; i++)
            {
                next_nodes.Add(0);
            }
            for (int j = 0; j < 58; j++)
            {
                for (int i = 0; i < 58; i++)
                {
                    next_nodes[j] += current_nodes[i] * current_weights[i][j];
                }
                next_nodes[j] += bias_weights[j];
                next_nodes[j] = ActivationFunction(next_nodes[j]);
            }
            return next_nodes;
        }

        /// <summary>
        /// Метод, позволяющий вычислить значение выходного нейрона.
        /// </summary>
        /// <param name="current_nodes"> Список значений нейронов последнего скрытого слоя.</param>
        /// <param name="current_weights">Список значений обычных весов, связывающих последний скрытый слой с открытым выходным слоем.</param>
        /// <param name="bias_weight">Значение последнего нейрона смещения.</param>
        /// <returns>Значение выходного нейрона.</returns>
        private double GetOutputLayer(List<double> current_nodes, List<double> current_weights, double bias_weight)
        {
            double output_node = 0;
            for (int i = 0; i < 58; i++)
            {
                output_node += current_nodes[i] * current_weights[i];
            }
            output_node += bias_weight;
            return output_node;
        }

        /// <summary>
        /// Метод, реализующий глубокое прямое распространение.
        /// </summary>
        /// <param name="current_nodes">Список текущих нейронов - нейронов входного слоя.</param>
        /// <returns>Результат, получаемый на выходе от нейросети.</returns>
        public double DeepFeedForward(List<double> current_nodes)
        {
            current_nodes = GetNextInnerLayer(current_nodes, first_weights, first_bias_weights);
            current_nodes = GetNextInnerLayer(current_nodes, second_weights, second_bias_weights);
            current_nodes = GetNextInnerLayer(current_nodes, third_weights, third_bias_weights);
            double output = ActivationFunction(GetOutputLayer(current_nodes, fourth_weights, fourth_bias_weight));
            return output;
        }
    }
}